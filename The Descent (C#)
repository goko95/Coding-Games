!!!03.16.2019!!!
!!!C#!!!

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;

/**
 * The while loop represents the game.
 * Each iteration represents a turn of the game
 * where you are given inputs (the heights of the mountains)
 * and where you have to print an output (the index of the mountain to fire on)
 * The inputs you are given are automatically updated according to your last actions.
 **/
class Player
{
    static void Main(string[] args)
    {

        // game loop
        while (true)
        {
            for (int i = 0; i < 8; i++)
            {
                int mountainH = int.Parse(Console.ReadLine()); // represents the height of one mountain.
            }

            // Write an action using Console.WriteLine()
            // To debug: Console.Error.WriteLine("Debug messages...");

            Console.WriteLine("4"); // The index of the mountain to fire on.
        }
    }
}

//My work
!!!03.17.2019!!!

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Coding_Game_Dot_Com
{
    class The_Descent
    {
        public static void Player()
        {
            Random kb = new Random();
            int mountainLenght = kb.Next(8) + 5; 
            int[] mountainH = new int[mountainLenght];
            int playerH = kb.Next(10) + 20;

            for (int i = 0; i < mountainLenght; i++) //This assigns height values
                mountainH[i] = kb.Next(8);


            int mountMaxValue = mountainH.Max(); //Calculates the max value of "mountainH"
            int mountMaxValueDamaged;
            int[,] mountainOutput = new int[mountMaxValue, mountainLenght]; //

            while (true)
            {
                mountMaxValueDamaged = mountainH.Max(); 
                int mountMaxIndex = mountainH.ToList().IndexOf(mountMaxValueDamaged);

                Console.WriteLine("Altitude " + playerH + "metres \n");

                if (playerH == mountMaxValueDamaged) //Win & Lose situations
                {
                    Console.WriteLine("You lose!");
                    Console.ReadKey();
                    return;
                }
                else if (mountainH.Max() == 0)
                {
                    Console.WriteLine("You win!");
                    Console.ReadKey();
                    return;
                }

                playerH--;

                for (int i = mountMaxValue; i > 0; i--) //Gives output
                {
                    for (int k = 0; k < mountainLenght; k++)
                        if (mountainH[k] >= i)
                            Console.Write("1");
                        else
                            Console.Write("0");

                    Console.WriteLine();
                }

                Console.ReadKey();
                
                //Manages the damage to the mountains
                mountainH[mountMaxIndex] = --mountMaxValueDamaged;
                if (mountMaxIndex + 1 < mountainLenght)
                    --mountainH[mountMaxIndex + 1];
                else if (mountMaxIndex - 1 >= 0)
                    --mountainH[mountMaxIndex - 1];
            }
        }
    }
}

/*
    Ok guys. So in this code it looks like I aced it, but not really. I have started working on this yesterday, and today I forget
    that I didn't upload anything yesterday, and worked on my code. At first, I was getting "IndexOutOfRangeException" exception,
    but it is fixed now and I forgot how the code previously looked like, so this time I will only explain the important parts.
    1. Why do I have two different arrays?
    I have two arrays, because one of them keeps track of height and the other just creates a matrix for us print on console. If I
    knew how to use "3D array", I would prefer using that, but since I haven't gone that further down the road I choosed this way.
    2.
        mountMaxValueDamaged = mountainH.Max(); 
        int mountMaxIndex = mountainH.ToList().IndexOf(mountMaxValueDamaged);
        
    These lines have to be inside the loop because they are constantly changing.
    3.
    "Win & Lose situations" have to be there, because if you write that at the bottom, then you will not be able to print the final
    result, which is the case, where every "mountainH" value is equal to 0, and if you write that after "playerH--;", then you would
    end the game earlier than it should end.
    4.
    Console.ReadKey();
    Even though this one is simple, it can be missed, so I want to point it out. If you don't have this line, then your code will run
    and finish what its doing then close before even you see anything on the console.
    5.
        mountainH[mountMaxIndex] = --mountMaxValueDamaged;
        if (mountMaxIndex + 1 < mountainLenght)
            --mountainH[mountMaxIndex + 1];
        else if (mountMaxIndex - 1 >= 0)
            --mountainH[mountMaxIndex - 1];
    Be careful when you are using the index values of an array inside "if"'s condition, because ALWAYS REMEMBER max index value of an
    array is NOT the value you have assigned, it is equal to the value that you have assigned minus 1.
    
    I hope you find this useful.
    
    Thanks
    GÃ¶kalp Ergenekon
*/
